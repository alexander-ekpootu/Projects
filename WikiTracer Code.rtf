{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww34360\viewh19280\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs29\fsmilli14667 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import os
\f1\fs24 \

\f0\fs29\fsmilli14667 import sys
\f1\fs24 \

\f0\fs29\fsmilli14667 import requests
\f1\fs24 \

\f0\fs29\fsmilli14667 from bs4 import BeautifulSoup
\f1\fs24 \

\f0\fs29\fsmilli14667 from typing import List, Tuple
\f1\fs24 \

\f0\fs29\fsmilli14667 from collections import Counter
\f1\fs24 \

\f0\fs29\fsmilli14667 from math import sqrt
\f1\fs24 \

\f0\fs29\fsmilli14667 from heapq import nlargest
\f1\fs24 \

\f0\fs29\fsmilli14667 from urllib.parse import urljoin
\f1\fs24 \

\f0\fs29\fsmilli14667 import concurrent.futures
\f1\fs24 \

\f0\fs29\fsmilli14667 from functools import lru_cache
\f1\fs24 \

\f0\fs29\fsmilli14667 import heapq
\f1\fs24 \

\f0\fs29\fsmilli14667 from collections import deque
\f1\fs24 \

\f0\fs29\fsmilli14667 import heapq
\f1\fs24 \
\

\f0\fs29\fsmilli14667 @lru_cache(maxsize=None)
\f1\fs24 \

\f0\fs29\fsmilli14667 def get_wiki_links(url):
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0response = requests.get(url)
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0soup = BeautifulSoup(response.text, 'html.parser')
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0links = soup.find_all('a')
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0wiki_links = [link.get('href') for link in links\'a0
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if link.get('href') and link.get('href').startswith('/wiki/')\'a0
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0and 'http' not in link.get('href')\'a0
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0and ':' not in link.get('href')]
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0full_links = [urljoin(url, link) for link in wiki_links]
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0return full_links
\f1\fs24 \
\

\f0\fs29\fsmilli14667 class Graph:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0def __init__(self):
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0self.graph = \{\}
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0def add_edge(self, start, end, weight):
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if start not in self.graph:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0self.graph[start] = \{\}
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0self.graph[start][end] = weight
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0def __contains__(self, node):
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return node in self.graph\'a0\'a0\'a0\'a0
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0def return_edges(self, node):
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return self.graph.get(node, \{\})
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0def __iter__(self):
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return iter(self.graph)
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0def print_graph(self):
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if not self.graph:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0print('Graph is empty')
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for node, neighbors in self.graph.items():
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0print(f'\{node\}:')
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for neighbor, weight in neighbors.items():
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0print(f'\'a0 -> \{neighbor\}, weight: \{weight\}')
\f1\fs24 \
\

\f0\fs29\fsmilli14667 def find_path(start, end, n, weight=1, Wikiholder=None):
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0if Wikiholder is None:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Wikiholder = Graph()
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0visited = set()
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0queue = deque([(start, 0)])
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0while queue:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0current_url, depth = queue.popleft()
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if depth > n:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0break
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if current_url not in visited:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0visited.add(current_url)
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0possible_links = get_wiki_links(current_url)
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for link in possible_links:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0Wikiholder.add_edge(current_url, link, weight)
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if link == end:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0visited.add(link)
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return Wikiholder
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if link not in visited:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0queue.append((link, depth + 1))
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0Wikiholder.add_edge(end, end, 1)\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0return Wikiholder
\f1\fs24 \

\f0\fs29\fsmilli14667 # use the return_edges method in order to get the neighbors of the node and find the shortest path from start to end node.
\f1\fs24 \

\f0\fs29\fsmilli14667 # Depth First Search Recursive Backtracking Solution to Find Path
\f1\fs24 \
\

\f0\fs29\fsmilli14667 def path(start, end, Wikiholder, current_path=None, visited=None):
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0if visited is None:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0visited = set()
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0if current_path is None:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0current_path = []
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0if start not in visited:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0current_path.append(start)
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0visited.add(start)
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if start == end:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return list(current_path)
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0neighbors = Wikiholder.return_edges(start)
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for neighbor in neighbors:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if neighbor not in visited:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0result = path(neighbor, end, Wikiholder, current_path, visited)
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if result:
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return result
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0visited.remove(start)
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0current_path.pop()
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0return None
\f1\fs24 \
\

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\fs24 \
\

\f0\fs29\fsmilli14667 def main(start, end):
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0Wikiholder = find_path(start, end, 500, weight=1)
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0shortest_path_result = path(start, end, Wikiholder)
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0print(f'Shortest path: \{shortest_path_result\}')
\f1\fs24 \
\

\f0\fs29\fsmilli14667 if __name__ == "__main__":
\f1\fs24 \

\f0\fs29\fsmilli14667 \'a0\'a0\'a0\'a0main("https://en.wikipedia.org/wiki/World_War_II", "https://en.wikipedia.org/wiki/Philosophy")
\f1\fs24 \
\
\
\
}